# Generated by Django 3.1.4 on 2021-09-14 20:09

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Hosts',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.GenericIPAddressField(help_text='主机ip地址')),
                ('hostname', models.CharField(blank=True,
                                              help_text='主机名', max_length=64, null=True)),
                ('port', models.IntegerField(
                    blank=True, help_text='主机SSH端口', null=True)),
                ('username', models.CharField(blank=True,
                                              help_text='SSH登录用户名', max_length=256, null=True)),
                ('password', models.CharField(blank=True,
                                              help_text='SSH登录密码', max_length=256, null=True)),
                ('status', models.IntegerField(choices=[(0, '正常'), (1, '纳管主机中'), (
                    2, '主机Agent异常'), (3, '监控Agent异常'), (4, '纳管主机失败'), (5, '维护')], help_text='主机状态')),
                ('service_num', models.IntegerField(
                    blank=True, help_text='主机上的服务个数', null=True)),
                ('alert_num', models.IntegerField(
                    blank=True, help_text='该主机的告警次数', null=True)),
                ('data_folder', models.CharField(
                    default='/data', help_text='数据目录', max_length=128)),
                ('idc', models.CharField(blank=True,
                                         help_text='IDC机房', max_length=128, null=True)),
                ('operate_system', models.CharField(blank=True,
                                                    help_text='主机操作系统', max_length=128, null=True)),
                ('memory', models.IntegerField(
                    blank=True, help_text='主机内存', null=True)),
                ('cpu', models.IntegerField(blank=True, help_text='主机cpu', null=True)),
                ('disk', models.JSONField(blank=True, help_text='主机磁盘信息', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='OperateLog',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(help_text='操作用户', max_length=128)),
                ('request_ip', models.GenericIPAddressField(
                    blank=True, help_text='请求来自ip', null=True)),
                ('request_method', models.CharField(
                    help_text='请求方法', max_length=32)),
                ('request_url', models.CharField(
                    help_text='用户访问的URL', max_length=256)),
                ('description', models.CharField(
                    help_text='用户行为描述', max_length=256)),
                ('response_code', models.IntegerField(
                    default=0, help_text='请求成功或失败标志')),
                ('request_result', models.CharField(
                    default='success', help_text='请求结果', max_length=1024)),
                ('create_time', models.DateTimeField(
                    auto_now_add=True, help_text='用户操作发生时间')),
            ],
            options={
                'verbose_name': '用户操作记录',
                'db_table': 'omp_operate_log',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(
                    max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(
                    blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True,
                                                max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True,
                                               max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True,
                                            max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(
                    default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(
                    default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户信息',
                'db_table': 'omp_user_profile',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
